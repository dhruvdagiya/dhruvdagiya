# -*- coding: utf-8 -*-
"""Project_DL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e_yestCDNLTBKFAbRT8BPKJ2IcpyAoEV
"""

from google.colab import drive
drive.mount('/content/drive/')

import pandas as pd
df = pd.read_excel('/content/drive/MyDrive/temprature.xlsx', index_col='Date')

df.head()

"""ploting a graph for the data"""

df.plot(color='red')

"""ploting the graph for a single year """

df_1984 = df[(df.index>'1983-01-01') & (df.index<'1985-01-01')]
df_1984.plot(color='purple')

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
plot_acf(df);

plot_pacf(df);

import numpy as np

def sampling(sequence, n_steps):

  X, Y = list(), list()

  for i in range(len(sequence)):

    sam = i + n_steps
    if sam > len(sequence)-1:
      break

    x, y = sequence[i:sam], sequence[sam]

    X.append(x)

    Y.append(y)

  return np.array(X), np.array(Y)

n_steps = 3
X, Y = sampling(df['Temp'].tolist(), n_steps)

for i in range(len(X)):
  print(X[i], Y[i])

X = X.reshape((X.shape[0], X.shape[1], 1))

from keras.models import Sequential
from keras.layers import LSTM
from keras.layers import Dense

model = Sequential()
model.add(LSTM(50, activation='relu', input_shape=(n_steps, 1)))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')

model.summary()

model.fit(X, Y, epochs=200, verbose=0)

x = np.array([17, 18, 19])
x = x.reshape((1, n_steps, 1))

ypred = model.predict(x, verbose=0)
ypred

history = model.fit(X, Y, epochs=200, verbose=0)

import matplotlib.pyplot as plt
def visualize_loss(history, title):
    loss = history.history["loss"]
    #val_loss = history.history["val_loss"]
    epochs = range(len(loss))
    plt.figure()
    plt.plot(epochs, loss, "b", label="Training loss")
    #plt.plot(epochs, val_loss, "r", label="Validation loss")
    plt.title(title)
    plt.xlabel("Epochs")
    plt.ylabel("Loss")
    plt.legend()
    plt.show()


visualize_loss(history, "Training Loss")

model_1 = Sequential()
model_1.add(LSTM(50, activation='relu', input_shape=(n_steps, 1), return_sequences=True))
model_1.add(LSTM(1, activation='relu', input_shape=(n_steps, 1)))
model_1.add(Dense(1))
model_1.compile(optimizer='adam', loss='mse')

model_1.summary()

model.fit(X, Y, epochs=200, verbose=1)

x = np.array([17, 18, 19])
x = x.reshape((1, n_steps, 1))

ypred = model_1.predict(x, verbose=1)
ypred